/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace KeyDictionary {
  export type CustomerDataStruct = {
    taxId: PromiseOrValue<BigNumberish>;
    bankNumber: PromiseOrValue<BigNumberish>;
    account: PromiseOrValue<BigNumberish>;
    branch: PromiseOrValue<BigNumberish>;
    wallet: PromiseOrValue<string>;
    registered: PromiseOrValue<boolean>;
    owner: PromiseOrValue<string>;
  };

  export type CustomerDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    boolean,
    string
  ] & {
    taxId: BigNumber;
    bankNumber: BigNumber;
    account: BigNumber;
    branch: BigNumber;
    wallet: string;
    registered: boolean;
    owner: string;
  };
}

export interface KeyDictionaryInterface extends utils.Interface {
  functions: {
    "addAccount(bytes32,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "authorizeKey(uint256,bytes32)": FunctionFragment;
    "getCustomerData(bytes32)": FunctionFragment;
    "getKey(address)": FunctionFragment;
    "getWallet(bytes32)": FunctionFragment;
    "requestKey(bytes32,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "token()": FunctionFragment;
    "updateData(bytes32,uint256,uint256,uint256,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAccount"
      | "authorizeKey"
      | "getCustomerData"
      | "getKey"
      | "getWallet"
      | "requestKey"
      | "token"
      | "updateData"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAccount",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeKey",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCustomerData",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWallet",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestKey",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateData",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCustomerData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "requestKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateData", data: BytesLike): Result;

  events: {
    "KeyRequested(address,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "KeyRequested"): EventFragment;
}

export interface KeyRequestedEventObject {
  owner: string;
  proposalId: BigNumber;
  key: string;
}
export type KeyRequestedEvent = TypedEvent<
  [string, BigNumber, string],
  KeyRequestedEventObject
>;

export type KeyRequestedEventFilter = TypedEventFilter<KeyRequestedEvent>;

export interface KeyDictionary extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KeyDictionaryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAccount(
      key: PromiseOrValue<BytesLike>,
      _taxId: PromiseOrValue<BigNumberish>,
      _bankNumber: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<BigNumberish>,
      _branch: PromiseOrValue<BigNumberish>,
      _wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizeKey(
      proposalId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCustomerData(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[KeyDictionary.CustomerDataStructOutput]>;

    getKey(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getWallet(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    requestKey(
      key: PromiseOrValue<BytesLike>,
      _taxId: PromiseOrValue<BigNumberish>,
      _bankNumber: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<BigNumberish>,
      _branch: PromiseOrValue<BigNumberish>,
      _wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    updateData(
      key: PromiseOrValue<BytesLike>,
      _taxId: PromiseOrValue<BigNumberish>,
      _bankNumber: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<BigNumberish>,
      _branch: PromiseOrValue<BigNumberish>,
      _wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addAccount(
    key: PromiseOrValue<BytesLike>,
    _taxId: PromiseOrValue<BigNumberish>,
    _bankNumber: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<BigNumberish>,
    _branch: PromiseOrValue<BigNumberish>,
    _wallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizeKey(
    proposalId: PromiseOrValue<BigNumberish>,
    key: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCustomerData(
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<KeyDictionary.CustomerDataStructOutput>;

  getKey(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getWallet(
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  requestKey(
    key: PromiseOrValue<BytesLike>,
    _taxId: PromiseOrValue<BigNumberish>,
    _bankNumber: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<BigNumberish>,
    _branch: PromiseOrValue<BigNumberish>,
    _wallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  updateData(
    key: PromiseOrValue<BytesLike>,
    _taxId: PromiseOrValue<BigNumberish>,
    _bankNumber: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<BigNumberish>,
    _branch: PromiseOrValue<BigNumberish>,
    _wallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAccount(
      key: PromiseOrValue<BytesLike>,
      _taxId: PromiseOrValue<BigNumberish>,
      _bankNumber: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<BigNumberish>,
      _branch: PromiseOrValue<BigNumberish>,
      _wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizeKey(
      proposalId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCustomerData(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<KeyDictionary.CustomerDataStructOutput>;

    getKey(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getWallet(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    requestKey(
      key: PromiseOrValue<BytesLike>,
      _taxId: PromiseOrValue<BigNumberish>,
      _bankNumber: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<BigNumberish>,
      _branch: PromiseOrValue<BigNumberish>,
      _wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    updateData(
      key: PromiseOrValue<BytesLike>,
      _taxId: PromiseOrValue<BigNumberish>,
      _bankNumber: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<BigNumberish>,
      _branch: PromiseOrValue<BigNumberish>,
      _wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "KeyRequested(address,uint256,bytes32)"(
      owner?: PromiseOrValue<string> | null,
      proposalId?: null,
      key?: PromiseOrValue<BytesLike> | null
    ): KeyRequestedEventFilter;
    KeyRequested(
      owner?: PromiseOrValue<string> | null,
      proposalId?: null,
      key?: PromiseOrValue<BytesLike> | null
    ): KeyRequestedEventFilter;
  };

  estimateGas: {
    addAccount(
      key: PromiseOrValue<BytesLike>,
      _taxId: PromiseOrValue<BigNumberish>,
      _bankNumber: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<BigNumberish>,
      _branch: PromiseOrValue<BigNumberish>,
      _wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizeKey(
      proposalId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCustomerData(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKey(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWallet(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestKey(
      key: PromiseOrValue<BytesLike>,
      _taxId: PromiseOrValue<BigNumberish>,
      _bankNumber: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<BigNumberish>,
      _branch: PromiseOrValue<BigNumberish>,
      _wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    updateData(
      key: PromiseOrValue<BytesLike>,
      _taxId: PromiseOrValue<BigNumberish>,
      _bankNumber: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<BigNumberish>,
      _branch: PromiseOrValue<BigNumberish>,
      _wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAccount(
      key: PromiseOrValue<BytesLike>,
      _taxId: PromiseOrValue<BigNumberish>,
      _bankNumber: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<BigNumberish>,
      _branch: PromiseOrValue<BigNumberish>,
      _wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizeKey(
      proposalId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCustomerData(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKey(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWallet(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestKey(
      key: PromiseOrValue<BytesLike>,
      _taxId: PromiseOrValue<BigNumberish>,
      _bankNumber: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<BigNumberish>,
      _branch: PromiseOrValue<BigNumberish>,
      _wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateData(
      key: PromiseOrValue<BytesLike>,
      _taxId: PromiseOrValue<BigNumberish>,
      _bankNumber: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<BigNumberish>,
      _branch: PromiseOrValue<BigNumberish>,
      _wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
