/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ITPFtOperation1002 {
  export type TPFtDataStruct = {
    acronym: PromiseOrValue<string>;
    code: PromiseOrValue<string>;
    maturityDate: PromiseOrValue<BigNumberish>;
  };

  export type TPFtDataStructOutput = [string, string, BigNumber] & {
    acronym: string;
    code: string;
    maturityDate: BigNumber;
  };
}

export interface ITPFtOperation1002Interface extends utils.Interface {
  functions: {
    "auctionPlacement(uint256,uint256,uint256,uint8,(string,string,uint256),uint256,uint256)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "auctionPlacement"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctionPlacement",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      ITPFtOperation1002.TPFtDataStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionPlacement",
    data: BytesLike
  ): Result;

  events: {
    "CommandEvent(uint256,uint256,uint256,address,address,uint8,tuple,uint256,uint256,uint256,string,uint256)": EventFragment;
    "CommandTradeEvent(uint256,address,address,uint8,tuple,uint256,uint256,uint256,string,uint256)": EventFragment;
    "OperationEvent(uint256,uint256,uint256,address,address,tuple,uint256,uint256,uint256,string,uint256)": EventFragment;
    "OperationTradeEvent(uint256,address,address,tuple,uint256,uint256,uint256,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CommandEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommandTradeEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperationEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperationTradeEvent"): EventFragment;
}

export interface CommandEventEventObject {
  operationId: BigNumber;
  cnpj8Sender: BigNumber;
  cnpj8Receiver: BigNumber;
  sender: string;
  receiver: string;
  callerPart: number;
  tpftData: ITPFtOperation1002.TPFtDataStructOutput;
  tpftAmount: BigNumber;
  unitPrice: BigNumber;
  financialValue: BigNumber;
  status: string;
  timestamp: BigNumber;
}
export type CommandEventEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    number,
    ITPFtOperation1002.TPFtDataStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ],
  CommandEventEventObject
>;

export type CommandEventEventFilter = TypedEventFilter<CommandEventEvent>;

export interface CommandTradeEventEventObject {
  operationId: BigNumber;
  sender: string;
  receiver: string;
  callerPart: number;
  tpftData: ITPFtOperation1002.TPFtDataStructOutput;
  tpftAmount: BigNumber;
  unitPrice: BigNumber;
  financialValue: BigNumber;
  status: string;
  timestamp: BigNumber;
}
export type CommandTradeEventEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    number,
    ITPFtOperation1002.TPFtDataStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ],
  CommandTradeEventEventObject
>;

export type CommandTradeEventEventFilter =
  TypedEventFilter<CommandTradeEventEvent>;

export interface OperationEventEventObject {
  operationId: BigNumber;
  cnpj8Sender: BigNumber;
  cnpj8Receiver: BigNumber;
  sender: string;
  receiver: string;
  tpftData: ITPFtOperation1002.TPFtDataStructOutput;
  tpftAmount: BigNumber;
  unitPrice: BigNumber;
  financialValue: BigNumber;
  status: string;
  timestamp: BigNumber;
}
export type OperationEventEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    ITPFtOperation1002.TPFtDataStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ],
  OperationEventEventObject
>;

export type OperationEventEventFilter = TypedEventFilter<OperationEventEvent>;

export interface OperationTradeEventEventObject {
  operationId: BigNumber;
  sender: string;
  receiver: string;
  tpftData: ITPFtOperation1002.TPFtDataStructOutput;
  tpftAmount: BigNumber;
  unitPrice: BigNumber;
  financialValue: BigNumber;
  status: string;
  timestamp: BigNumber;
}
export type OperationTradeEventEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    ITPFtOperation1002.TPFtDataStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ],
  OperationTradeEventEventObject
>;

export type OperationTradeEventEventFilter =
  TypedEventFilter<OperationTradeEventEvent>;

export interface ITPFtOperation1002 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITPFtOperation1002Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctionPlacement(
      operationId: PromiseOrValue<BigNumberish>,
      cnpj8Sender: PromiseOrValue<BigNumberish>,
      cnpj8Receiver: PromiseOrValue<BigNumberish>,
      callerPart: PromiseOrValue<BigNumberish>,
      tpftData: ITPFtOperation1002.TPFtDataStruct,
      tpftAmount: PromiseOrValue<BigNumberish>,
      unitPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  auctionPlacement(
    operationId: PromiseOrValue<BigNumberish>,
    cnpj8Sender: PromiseOrValue<BigNumberish>,
    cnpj8Receiver: PromiseOrValue<BigNumberish>,
    callerPart: PromiseOrValue<BigNumberish>,
    tpftData: ITPFtOperation1002.TPFtDataStruct,
    tpftAmount: PromiseOrValue<BigNumberish>,
    unitPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    auctionPlacement(
      operationId: PromiseOrValue<BigNumberish>,
      cnpj8Sender: PromiseOrValue<BigNumberish>,
      cnpj8Receiver: PromiseOrValue<BigNumberish>,
      callerPart: PromiseOrValue<BigNumberish>,
      tpftData: ITPFtOperation1002.TPFtDataStruct,
      tpftAmount: PromiseOrValue<BigNumberish>,
      unitPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CommandEvent(uint256,uint256,uint256,address,address,uint8,tuple,uint256,uint256,uint256,string,uint256)"(
      operationId?: null,
      cnpj8Sender?: null,
      cnpj8Receiver?: null,
      sender?: null,
      receiver?: null,
      callerPart?: null,
      tpftData?: null,
      tpftAmount?: null,
      unitPrice?: null,
      financialValue?: null,
      status?: null,
      timestamp?: null
    ): CommandEventEventFilter;
    CommandEvent(
      operationId?: null,
      cnpj8Sender?: null,
      cnpj8Receiver?: null,
      sender?: null,
      receiver?: null,
      callerPart?: null,
      tpftData?: null,
      tpftAmount?: null,
      unitPrice?: null,
      financialValue?: null,
      status?: null,
      timestamp?: null
    ): CommandEventEventFilter;

    "CommandTradeEvent(uint256,address,address,uint8,tuple,uint256,uint256,uint256,string,uint256)"(
      operationId?: null,
      sender?: null,
      receiver?: null,
      callerPart?: null,
      tpftData?: null,
      tpftAmount?: null,
      unitPrice?: null,
      financialValue?: null,
      status?: null,
      timestamp?: null
    ): CommandTradeEventEventFilter;
    CommandTradeEvent(
      operationId?: null,
      sender?: null,
      receiver?: null,
      callerPart?: null,
      tpftData?: null,
      tpftAmount?: null,
      unitPrice?: null,
      financialValue?: null,
      status?: null,
      timestamp?: null
    ): CommandTradeEventEventFilter;

    "OperationEvent(uint256,uint256,uint256,address,address,tuple,uint256,uint256,uint256,string,uint256)"(
      operationId?: null,
      cnpj8Sender?: null,
      cnpj8Receiver?: null,
      sender?: null,
      receiver?: null,
      tpftData?: null,
      tpftAmount?: null,
      unitPrice?: null,
      financialValue?: null,
      status?: null,
      timestamp?: null
    ): OperationEventEventFilter;
    OperationEvent(
      operationId?: null,
      cnpj8Sender?: null,
      cnpj8Receiver?: null,
      sender?: null,
      receiver?: null,
      tpftData?: null,
      tpftAmount?: null,
      unitPrice?: null,
      financialValue?: null,
      status?: null,
      timestamp?: null
    ): OperationEventEventFilter;

    "OperationTradeEvent(uint256,address,address,tuple,uint256,uint256,uint256,string,uint256)"(
      operationId?: null,
      sender?: null,
      receiver?: null,
      tpftData?: null,
      tpftAmount?: null,
      unitPrice?: null,
      financialValue?: null,
      status?: null,
      timestamp?: null
    ): OperationTradeEventEventFilter;
    OperationTradeEvent(
      operationId?: null,
      sender?: null,
      receiver?: null,
      tpftData?: null,
      tpftAmount?: null,
      unitPrice?: null,
      financialValue?: null,
      status?: null,
      timestamp?: null
    ): OperationTradeEventEventFilter;
  };

  estimateGas: {
    auctionPlacement(
      operationId: PromiseOrValue<BigNumberish>,
      cnpj8Sender: PromiseOrValue<BigNumberish>,
      cnpj8Receiver: PromiseOrValue<BigNumberish>,
      callerPart: PromiseOrValue<BigNumberish>,
      tpftData: ITPFtOperation1002.TPFtDataStruct,
      tpftAmount: PromiseOrValue<BigNumberish>,
      unitPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionPlacement(
      operationId: PromiseOrValue<BigNumberish>,
      cnpj8Sender: PromiseOrValue<BigNumberish>,
      cnpj8Receiver: PromiseOrValue<BigNumberish>,
      callerPart: PromiseOrValue<BigNumberish>,
      tpftData: ITPFtOperation1002.TPFtDataStruct,
      tpftAmount: PromiseOrValue<BigNumberish>,
      unitPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
