/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface SwapTwoStepsInterface extends utils.Interface {
  functions: {
    "cancelSwap(uint256,string)": FunctionFragment;
    "executeSwap(uint256)": FunctionFragment;
    "startSwap(address,address,address,uint256)": FunctionFragment;
    "swapProposals(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelSwap"
      | "executeSwap"
      | "startSwap"
      | "swapProposals"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelSwap",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSwap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startSwap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapProposals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "cancelSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapProposals",
    data: BytesLike
  ): Result;

  events: {
    "ExpiredProposal(uint256)": EventFragment;
    "SwapCancelled(uint256,string)": EventFragment;
    "SwapExecuted(uint256,uint256,uint256,address,address,uint256)": EventFragment;
    "SwapStarted(uint256,uint256,uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExpiredProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapStarted"): EventFragment;
}

export interface ExpiredProposalEventObject {
  proposalId: BigNumber;
}
export type ExpiredProposalEvent = TypedEvent<
  [BigNumber],
  ExpiredProposalEventObject
>;

export type ExpiredProposalEventFilter = TypedEventFilter<ExpiredProposalEvent>;

export interface SwapCancelledEventObject {
  proposalId: BigNumber;
  reason: string;
}
export type SwapCancelledEvent = TypedEvent<
  [BigNumber, string],
  SwapCancelledEventObject
>;

export type SwapCancelledEventFilter = TypedEventFilter<SwapCancelledEvent>;

export interface SwapExecutedEventObject {
  proposalId: BigNumber;
  senderNumber: BigNumber;
  receiverNumber: BigNumber;
  sender: string;
  receiver: string;
  amount: BigNumber;
}
export type SwapExecutedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string, BigNumber],
  SwapExecutedEventObject
>;

export type SwapExecutedEventFilter = TypedEventFilter<SwapExecutedEvent>;

export interface SwapStartedEventObject {
  proposalId: BigNumber;
  senderNumber: BigNumber;
  receiverNumber: BigNumber;
  sender: string;
  receiver: string;
  amount: BigNumber;
}
export type SwapStartedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string, BigNumber],
  SwapStartedEventObject
>;

export type SwapStartedEventFilter = TypedEventFilter<SwapStartedEvent>;

export interface SwapTwoSteps extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwapTwoStepsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelSwap(
      proposalId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeSwap(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startSwap(
      tokenSender: PromiseOrValue<string>,
      tokenReceiver: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapProposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, number, BigNumber] & {
        tokenSender: string;
        tokenReceiver: string;
        sender: string;
        receiver: string;
        amount: BigNumber;
        status: number;
        timestamp: BigNumber;
      }
    >;
  };

  cancelSwap(
    proposalId: PromiseOrValue<BigNumberish>,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeSwap(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startSwap(
    tokenSender: PromiseOrValue<string>,
    tokenReceiver: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapProposals(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, BigNumber, number, BigNumber] & {
      tokenSender: string;
      tokenReceiver: string;
      sender: string;
      receiver: string;
      amount: BigNumber;
      status: number;
      timestamp: BigNumber;
    }
  >;

  callStatic: {
    cancelSwap(
      proposalId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeSwap(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startSwap(
      tokenSender: PromiseOrValue<string>,
      tokenReceiver: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapProposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, number, BigNumber] & {
        tokenSender: string;
        tokenReceiver: string;
        sender: string;
        receiver: string;
        amount: BigNumber;
        status: number;
        timestamp: BigNumber;
      }
    >;
  };

  filters: {
    "ExpiredProposal(uint256)"(proposalId?: null): ExpiredProposalEventFilter;
    ExpiredProposal(proposalId?: null): ExpiredProposalEventFilter;

    "SwapCancelled(uint256,string)"(
      proposalId?: null,
      reason?: null
    ): SwapCancelledEventFilter;
    SwapCancelled(proposalId?: null, reason?: null): SwapCancelledEventFilter;

    "SwapExecuted(uint256,uint256,uint256,address,address,uint256)"(
      proposalId?: null,
      senderNumber?: null,
      receiverNumber?: null,
      sender?: null,
      receiver?: null,
      amount?: null
    ): SwapExecutedEventFilter;
    SwapExecuted(
      proposalId?: null,
      senderNumber?: null,
      receiverNumber?: null,
      sender?: null,
      receiver?: null,
      amount?: null
    ): SwapExecutedEventFilter;

    "SwapStarted(uint256,uint256,uint256,address,address,uint256)"(
      proposalId?: null,
      senderNumber?: null,
      receiverNumber?: null,
      sender?: null,
      receiver?: null,
      amount?: null
    ): SwapStartedEventFilter;
    SwapStarted(
      proposalId?: null,
      senderNumber?: null,
      receiverNumber?: null,
      sender?: null,
      receiver?: null,
      amount?: null
    ): SwapStartedEventFilter;
  };

  estimateGas: {
    cancelSwap(
      proposalId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeSwap(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startSwap(
      tokenSender: PromiseOrValue<string>,
      tokenReceiver: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapProposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelSwap(
      proposalId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeSwap(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startSwap(
      tokenSender: PromiseOrValue<string>,
      tokenReceiver: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapProposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
