/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  KeyDictionary,
  KeyDictionaryInterface,
} from "../../contracts/KeyDictionary";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "KeyRequested",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_taxId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_bankNumber",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_account",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_branch",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_wallet",
        type: "address",
      },
    ],
    name: "addAccount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "authorizeKey",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "getCustomerData",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "taxId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "bankNumber",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "account",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "branch",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "wallet",
            type: "address",
          },
          {
            internalType: "bool",
            name: "registered",
            type: "bool",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
        ],
        internalType: "struct KeyDictionary.CustomerData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
    ],
    name: "getKey",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "getWallet",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_taxId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_bankNumber",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_account",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_branch",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_wallet",
        type: "address",
      },
    ],
    name: "requestKey",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract RealDigital",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_taxId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_bankNumber",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_account",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_branch",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_wallet",
        type: "address",
      },
    ],
    name: "updateData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106a63803806106a683398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610613806100936000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a33c9a361161005b578063a33c9a3614610197578063c82d5d86146101aa578063e9c1d83d146101bd578063fc0c546a146101d057600080fd5b8063303455431461008d578063789d392a146100a257806382007af1146100eb57806393790f4414610160575b600080fd5b6100a061009b36600461052f565b6101e3565b005b6100ce6100b0366004610580565b6000908152600160205260409020600401546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b6100fe6100f9366004610580565b610263565b6040516100e29190815181526020808301519082015260408083015190820152606080830151908201526080808301516001600160a01b039081169183019190915260a08084015115159083015260c092830151169181019190915260e00190565b61018961016e366004610599565b6001600160a01b031660009081526002602052604090205490565b6040519081526020016100e2565b6100a06101a536600461052f565b61032f565b6100a06101b836600461052f565b610388565b6100a06101cb3660046105bb565b61045d565b6000546100ce906001600160a01b031681565b600086815260016020526040902060040154600160a01b900460ff161561024d5760405162461bcd60e51b815260206004820152601960248201527812d95e481a5cc8185b1c9958591e481c9959da5cdd195c9959603a1b60448201526064015b60405180910390fd5b61025b868686868686610388565b505050505050565b6102b76040518060e001604052806000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160001515815260200160006001600160a01b031681525090565b50600090815260016020818152604092839020835160e0810185528154815292810154918301919091526002810154928201929092526003820154606082015260048201546001600160a01b038082166080840152600160a01b90910460ff16151560a083015260059092015490911660c082015290565b6000868152600160205260409020600501546001600160a01b0316331461024d5760405162461bcd60e51b815260206004820152600d60248201526c2737ba103a34329037bbb732b960991b6044820152606401610244565b600086815260016020526040902060040154600160a01b900460ff16156103ed5760405162461bcd60e51b815260206004820152601960248201527812d95e481a5cc8185b1c9958591e481c9959da5cdd195c9959603a1b6044820152606401610244565b60008681526001602081815260408084209889559188019690965560028088019590955560038701939093556004860180546001600160a81b0319166001600160a01b03909316928317600160a01b179055600590950180546001600160a01b0319163317905584529152902055565b600081815260016020526040902060040154600160a01b900460ff166104bd5760405162461bcd60e51b815260206004820152601560248201527412d95e481a5cc81b9bdd081c9959da5cdd195c9959605a1b6044820152606401610244565b60008181526001602090815260409182902060050154915184815283926001600160a01b0316917fcc3b754f76b710137fc464bbebc86e795542475cf6fdac7b570c72889b9fe863910160405180910390a35050565b80356001600160a01b038116811461052a57600080fd5b919050565b60008060008060008060c0878903121561054857600080fd5b863595506020870135945060408701359350606087013592506080870135915061057460a08801610513565b90509295509295509295565b60006020828403121561059257600080fd5b5035919050565b6000602082840312156105ab57600080fd5b6105b482610513565b9392505050565b600080604083850312156105ce57600080fd5b5050803592602090910135915056fea2646970667358221220b5cfb5476f802729559d730c8cbfd946e65121cfa992f3a8d6757b8e3e3176d164736f6c63430008130033";

type KeyDictionaryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: KeyDictionaryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class KeyDictionary__factory extends ContractFactory {
  constructor(...args: KeyDictionaryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<KeyDictionary> {
    return super.deploy(_token, overrides || {}) as Promise<KeyDictionary>;
  }
  override getDeployTransaction(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, overrides || {});
  }
  override attach(address: string): KeyDictionary {
    return super.attach(address) as KeyDictionary;
  }
  override connect(signer: Signer): KeyDictionary__factory {
    return super.connect(signer) as KeyDictionary__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): KeyDictionaryInterface {
    return new utils.Interface(_abi) as KeyDictionaryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): KeyDictionary {
    return new Contract(address, _abi, signerOrProvider) as KeyDictionary;
  }
}
