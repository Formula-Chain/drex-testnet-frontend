/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "AddressDiscovery",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressDiscovery__factory>;
    getContractFactory(
      name: "CBDCAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CBDCAccessControl__factory>;
    getContractFactory(
      name: "ITPFtOperation1002",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITPFtOperation1002__factory>;
    getContractFactory(
      name: "ITPFtOperation1052",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITPFtOperation1052__factory>;
    getContractFactory(
      name: "KeyDictionary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KeyDictionary__factory>;
    getContractFactory(
      name: "RealDigital",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RealDigital__factory>;
    getContractFactory(
      name: "RealDigitalDefaultAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RealDigitalDefaultAccount__factory>;
    getContractFactory(
      name: "RealDigitalEnableAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RealDigitalEnableAccount__factory>;
    getContractFactory(
      name: "RealTokenizado",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RealTokenizado__factory>;
    getContractFactory(
      name: "STR",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.STR__factory>;
    getContractFactory(
      name: "SwapOneStep",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapOneStep__factory>;
    getContractFactory(
      name: "SwapTwoSteps",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapTwoSteps__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "AddressDiscovery",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressDiscovery>;
    getContractAt(
      name: "CBDCAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CBDCAccessControl>;
    getContractAt(
      name: "ITPFtOperation1002",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITPFtOperation1002>;
    getContractAt(
      name: "ITPFtOperation1052",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITPFtOperation1052>;
    getContractAt(
      name: "KeyDictionary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KeyDictionary>;
    getContractAt(
      name: "RealDigital",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RealDigital>;
    getContractAt(
      name: "RealDigitalDefaultAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RealDigitalDefaultAccount>;
    getContractAt(
      name: "RealDigitalEnableAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RealDigitalEnableAccount>;
    getContractAt(
      name: "RealTokenizado",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RealTokenizado>;
    getContractAt(
      name: "STR",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.STR>;
    getContractAt(
      name: "SwapOneStep",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapOneStep>;
    getContractAt(
      name: "SwapTwoSteps",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapTwoSteps>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
